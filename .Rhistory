out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
dt
opening	<- dt$opening
opening
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml)
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
file <- "test-bare.rmd"
add_opening(text_out, opening)
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
output <- dt$output
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
text_out
childdoc <- str_c("```{r, child=c('", child, "')}")
child <- opening
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text_out
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
text
text <- text %>% str_replace("<!-- opening -->",childdoc)
text
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace("<!-- opening -->",childdoc)
text <- text %>% str_replace("<!-- openingending -->","```")
return(text)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen2)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
parameters<- read_csv("build_parameters.csv")
parameters<- read_csv("build_parameters.csv")
parameters
saveRDS(parameters, file = "build_parameters.rds")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
parameters<- read_csv("build_parameters.csv")
parameters<- read_csv("build_parameters.csv")
use_data(parameters)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
install_github("lidaidavid/academicwriting")
install_github("lidaidavid/academicwriting")
use_data(parameters, internal = T)
parameters<- read_csv("build_parameters.csv")
use_data(parameters, internal = T)
load("R/sysdata.rda")
k <- load("R/sysdata.rda")
k
build_parameters <- read_csv("build_parameters.csv")
use_data(build_parameters, internal = T)
use_data(build_parameters, internal = T, overwrite = T)
a <- "adfadf"
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
"a" %>% parse_character()
"a" %>% eval()
if (!require("pacman")) install.packages("pacman"); library(pacman);
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
a <- "asdfaf"
"a" %>% parse() %>% eval()
"a" %>% eval() %>% parse()
names("a")
get("a")
p_load(available)
available("academicwriting")
?document
document()
?system.file
?rdocx_document
rmarkdown:: word_document2
bookdown::word_document2()
if (!require("pacman")) install.packages("pacman"); library(pacman)
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
system.file()
?system.file()
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
build_parameters <- read_csv("build_parameters.csv")
use_data(build_parameters, internal = T, overwrite = T)
document()
load_all()
test()
?test()
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
check()
check()
load_all()
build_rmd("test-bare.rmd", "shehuixueyanjiu")
getwd()
#use_rmarkdown_template(template_name = "shehuixueyanjiu",
#                       template_description = "a template adhering to the guidlines of the Chinese: Sociological Studies (shehuixueyanjiu)"
#                       )
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
build_rmd("skeleton.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
document()
load_all()
#use_rmarkdown_template(template_name = "shehuixueyanjiu",
#                       template_description = "a template adhering to the guidlines of the Chinese: Sociological Studies (shehuixueyanjiu)"
#                       )
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
build_rmd("skeleton.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
kankan <- readLines("shehuixueyanjiu.rmd")
kankan
subtitle <- ""
ifelse(is.na(subtitle), "", "str_c('——', subtitle)")
ifelse(subtitle == "", "", "str_c('——', subtitle)")
document()
load_all()
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
build_rmd("skeleton.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
document()
load_all()
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
build_rmd("skeleton.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.cap = TRUE)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(tidyverse, officer, officedown, knitr, rmarkdown)
title <- ""
subtitle <- ""
author_names <- c("")
affiliation <- c("")
abstract <- ""
keywords <- c("", "", "", "")
author_str <- str_c(author_names, collapse = "，")
figures <- read_csv("0-figures.csv")
tables <- read_csv("0-tables.csv")
```{r }
abstract_text1 <- fp_text(font.size = 9,
bold = F,
font.family = "SimHei",
underlined = F
)
abstract_text2 <- fp_text(font.size = 9,
bold = F,
font.family = "FangSong",
underlined = F
)
get_author <- function(author){
author_text <- character()
for (i in 1:length(author)) {
temp_a <- ifelse(nchar(author[i]) == 2, str_c(str_sub(author[i], 1,1),"   ",str_sub(author[i], 2,2)), author[i])
author_text <- c(author_text, temp_a)
}
author_text <- str_c(author_text, collapse = "  ")
return(author_text)
}
author_str <- get_author(author_names)
author_text <- fp_text(font.size = 12,
bold = F,
font.family = "KaiTi_GB2312",
underlined = F
)
author_para <- fp_par(text.align = "center",
line_spacing = 1,
padding.bottom = 0,
padding.top = 0)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.cap = TRUE)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(tidyverse, officer, officedown, knitr, rmarkdown)
# p_load(equatiomatic, DiagrammeR)
title <- ""
subtitle <- ""
author_names <- c("")
affiliation <- c("")
abstract <- ""
keywords <- c("", "", "", "")
author_str <- str_c(author_names, collapse = "，")
figures <- read_csv("0-figures.csv")
tables <- read_csv("0-tables.csv")
ftext('提要：', abstract_text1)``r ftext(abstract, abstract_text2)
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("skeleton.rmd", "shehuixueyanjiu") %>% writeLines("test-shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
setwd("D:/nuts/1-building-templates/academicwriting/inst/rmarkdown/templates/shehuixueyanjiu/skeleton")
# 需要手动改一下编码之后
render("test-shehuixueyanjiu.rmd")
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
bib <- readLines("D:/literature/0bib/original-rep.txt", encoding = "UTF-8")
bib2 <- str_c(bib, collapse = "")
bib2 %>% length()
bib2 %>% str_split("CNKI")
bib3 <- bib2 %>% str_split("CNKI")
bib4 <- bib3[bib3 %>% str_detect("\\{Author\\}")]
length(bib4)
c("ad", "bd", "cd") %>% str_detect("b")
c("ad", "bd", "cd"){c("ad", "bd", "cd") %>% str_detect("b")}
c("ad", "bd", "cd")[c("ad", "bd", "cd") %>% str_detect("b")]
bib3 %>% str_detect("\\{Author\\}")
length(bib3)
class(bib3)
(bib3[[1]])
bib4 <- bib3[[1]][bib3[[1]] %>% str_detect("\\{Author\\}")]
length(bib4)
head(bib4)
bib2 <- str_c(bib, collapse = "^")
bib3 <- bib2 %>% str_split("CNKI")
bib4 <- bib3[[1]][bib3[[1]] %>% str_detect("\\{Author\\}")]
length(bib4)
head(bib4)
"adf^" %>% str_detect("^")
"adf^" %>% str_remove_all("^")
"adf^" %>% str_remove_all("\\^")
extracing_elements <- function(str, bib){
str <- str_replace_all()
out <- str_extract_all(bib, str_c("\\{",str,"\\}:.*\\^"), simplify = T)[str_extract_all(bib, str_c("\\{",str,"\\}:.*\\^"), simplify = T) != ""]
out <- out %>% str_remove_all(str_c("\\{",str,"\\}: "))
out <- out %>% str_remove_all(str_c("\\^"))
return(out)
}
new_bib <- extracing_elements("Title", bib) %>% as.data.frame()
t <- "^^{Reference Type}: Journal Article^{Title}: 技术自主性与国家形塑  国家与技术治理关系研究的政治脉络及其想象^{Author}: 陈天祥;徐雅倩;^{Author Address}: 中山大学政治与公共事务管理学院/中国公共管理研究中心;中山大学政治与公共事务管理学院;^{Journal}: 社会^{Year}: 2020^{Volume}: 40^{Issue}: 05^{Pages}: 137-168^{Keywords}: 技术治理;国家治理;自主性;政治脉络;市场野性^{Abstract}: 技术治理进入国家视野是一个循序渐进的过程。相关研究先后拓展和增加了专家治国、技术官僚、信息技术和微观政治等概念,并分化为两个研究维度:一是一以贯之的国家如何以\"技术性方式\"进行治理;二是由\"信息技术在政府应用\"这一研究分支发展而来,分析国家如何将新技术手段引入治理。其中,前者是技术治理概念的逻辑起点,本文从这一起点展开分析国家与技术治理的关系,试图还原技术治理的本来面貌。基于技术治理具有自身发展和运作的自主性,国家与技术治理关系呈现三种基本形态:\"吸纳\"状态下国家对\"可控\"技术治理的应用、\"扩散\"状态下国家对\"自主\"技术治理的干预和\"分途\"状态下国家对\"失控\"技术治理的监管。最后,本文还进一步提出\"超越技术治理\"的两种路径构想,由此系统呈现了国家与技术治理相互形塑的整体图景,为技术治理研究提供了新的反思与关注的视角。^{ISBN/ISSN}: 1004-8804^{Notes}: 31-1123/C^{Database Provider}: "
s <- str_extract_all(t, str_c("\\{","Title","\\}:.*\\^"), simplify = T)[str_extract_all(t, str_c("\\{","Title","\\}:.*\\^"), simplify = T) != ""]
s
cheat()
s <- str_extract_all(t, str_c("\\{","Title","\\}:.*?\\^"), simplify = T)[str_extract_all(t, str_c("\\{","Title","\\}:.*?\\^"), simplify = T) != ""]
s
s %>% str_remove_all(str_c("\\^"))
extracing_elements <- function(str, bib){
str <- str_replace_all()
out <- str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T)[str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T) != ""]
out <- out %>% str_remove_all(str_c("\\{",str,"\\}: "))
out <- out %>% str_remove_all(str_c("\\^"))
return(out)
}
new_bib <- extracing_elements("Title", bib) %>% as.data.frame()
extracing_elements <- function(str, bib){
out <- str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T)[str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T) != ""]
out <- out %>% str_remove_all(str_c("\\{",str,"\\}: "))
out <- out %>% str_remove_all(str_c("\\^"))
return(out)
}
new_bib <- extracing_elements("Title", bib) %>% as.data.frame()
colnames(new_bib) <- "title"
new_bib$author <- extracing_elements("Author", bib)
tail(new_bib)
nrow(new_bib)
new_bib <- extracing_elements("Title", bib) %>% as.data.frame()
new_bib
t <-  "{Title}: 技术自主性与国家形塑  国家与技术治理关系研究的政治脉络及其想象^{Author}: 陈天祥;徐雅倩;^{Author Address}: 中山大学政治与公共事务管理学院/中国公共管理研究中心;中山大学政治与公共事务管理学院;^{Journal}: 社会^{Year}: 2020^{Volume}: 40^{Issue}: 05^{Pages}: 137-168^{Keywords}: 技术治理;国家治理;自主性;政治脉络;市场野性^{Abstract}: 技术治理进入国家视野是一个循序渐进的过程。相关研究先后拓展和增加了专家治国、技术官僚、信息技术和微观政治等概念,并分化为两个研究维度:一是一以贯之的国家如何以\"技术性方式\"进行治理;二是由\"信息技术在政府应用\"这一研究分支发展而来,分析国家如何将新技术手段引入治理。其中,前者是技术治理概念的逻辑起点,本文从这一起点展开分析国家与技术治理的关系,试图还原技术治理的本来面貌。基于技术治理具有自身发展和运作的自主性,国家与技术治理关系呈现三种基本形态:\"吸纳\"状态下国家对\"可控\"技术治理的应用、\"扩散\"状态下国家对\"自主\"技术治理的干预和\"分途\"状态下国家对\"失控\"技术治理的监管。最后,本文还进一步提出\"超越技术治理\"的两种路径构想,由此系统呈现了国家与技术治理相互形塑的整体图景,为技术治理研究提供了新的反思与关注的视角。^{ISBN/ISSN}: 1004-8804^{Notes}: 31-1123/C^"
bib <-  "{Title}: 技术自主性与国家形塑  国家与技术治理关系研究的政治脉络及其想象^{Author}: 陈天祥;徐雅倩;^{Author Address}: 中山大学政治与公共事务管理学院/中国公共管理研究中心;中山大学政治与公共事务管理学院;^{Journal}: 社会^{Year}: 2020^{Volume}: 40^{Issue}: 05^{Pages}: 137-168^{Keywords}: 技术治理;国家治理;自主性;政治脉络;市场野性^{Abstract}: 技术治理进入国家视野是一个循序渐进的过程。相关研究先后拓展和增加了专家治国、技术官僚、信息技术和微观政治等概念,并分化为两个研究维度:一是一以贯之的国家如何以\"技术性方式\"进行治理;二是由\"信息技术在政府应用\"这一研究分支发展而来,分析国家如何将新技术手段引入治理。其中,前者是技术治理概念的逻辑起点,本文从这一起点展开分析国家与技术治理的关系,试图还原技术治理的本来面貌。基于技术治理具有自身发展和运作的自主性,国家与技术治理关系呈现三种基本形态:\"吸纳\"状态下国家对\"可控\"技术治理的应用、\"扩散\"状态下国家对\"自主\"技术治理的干预和\"分途\"状态下国家对\"失控\"技术治理的监管。最后,本文还进一步提出\"超越技术治理\"的两种路径构想,由此系统呈现了国家与技术治理相互形塑的整体图景,为技术治理研究提供了新的反思与关注的视角。^{ISBN/ISSN}: 1004-8804^{Notes}: 31-1123/C^"
str <- "Title"
out <- str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T)[str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T) != ""]
out
out <- out %>% str_remove_all(str_c("\\{",str,"\\}: "))
out
out <- out %>% str_remove_all(str_c("\\^"))
out
extracing_elements <- function(str, bib){
out <- str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T)[str_extract_all(bib, str_c("\\{",str,"\\}:.*?\\^"), simplify = T) != ""]
out <- out %>% str_remove_all(str_c("\\{",str,"\\}: "))
out <- out %>% str_remove_all(str_c("\\^"))
return(out)
}
new_bib <- extracing_elements("Title", bib4) %>% as.data.frame()
colnames(new_bib) <- "title"
new_bib$author <- extracing_elements("Author", bib)
nrow(new_bib)
tail(new_bib)
new_bib$author <- extracing_elements("Author", bib4)
tail(new_bib)
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2, pinyin)
"技术自主性与国家形" %>% pinyin()
?pinyin
?py
py("技术自主性与国家形")
py("技术自主性与国家形", dic = pydic(method = "toneless"))
py("技术自主性与国家形", dic = pydic(method = "toneless"), sep = "")
new_bib$journal <- extracing_elements("Journal", bib4)
new_bib$year <- extracing_elements("Year", bib4)
new_bib$volume <- extracing_elements("Volume", bib4)
new_bib$number <- extracing_elements("Issue", bib4)
zuozhe <- new_bib$author %>% str_remove_all(";")
pinyin <- character()
for (i in 1:length(zuozhe)) {
pinyin <- c(pinyin, py(zuozhe[i], dic = pydic(method = "toneless"), sep = "")
)
}
head(pinyin)
class(pinyin)
pinyin[1]
head(pinyin, 50)
"li/lisongtao" %>% str_remove_all("li/")
new_bib$note <- pinyin %>% str_remove_all("li/")
new_bib$note %>% str_detect("/")
new_bib$note[new_bib$note %>% str_detect("/")]
pinyin[pinyin %>% str_detect("/")]
py("陈云松吴晓刚胡安宁贺光烨句国栋", dic = pydic(method = "toneless"), sep = "")
py("陈云松吴晓刚胡安宁贺光烨句国栋", dic = pydic(method = "toneless"), sep = "",multi = FALSE)
py("陈云松吴晓刚胡安宁贺光烨句国栋", dic = pydic(method = "toneless", multi = FALSE), sep = "")
warnings()
new_bib$note <- pinyin %>% str_remove_all("li/|la/|dan/chen/|ju/|gou/")
new_bib$note[new_bib$note %>% str_detect("/")]
new_bib$note <- pinyin %>% str_remove_all("(li/)|(la/)|(dan/)|(chen/)|(ju/)|(gou/)")
new_bib$note[new_bib$note %>% str_detect("/")]
new_bib$note <- pinyin %>% str_remove_all("(li/)|(la/)|(dan/)|(chen/)|(ju/)|(gou/)|(ni/)|(ruo/)|(xing/)|(hang/)|(ling/)|(suo/|(ruo/))")
new_bib$note[new_bib$note %>% str_detect("/")]
?saveRDS
saveRDS(new_bib, file = "bib_2journals.rds")
head(new_bib)
new_bib$pages <- extracing_elements("Pages", bib4)
head(new_bib)
saveRDS(new_bib, file = "bib_2journals.rds")
new_bib[1,]$author
cheat()
new_bib[1,]$author %>% str_remove_all(";\\b")
new_bib[1,]$author %>% str_remove_all(";\b")
new_bib[1,]$author %>% str_remove_all("(;\b)")
new_bib[1,]$author %>% str_remove_all("(;\\b)")
new_bib[1,]$author %>% str_remove_all("(;$)")
"a;f;d;"%>% str_remove_all("(;$)")
new_bib$author_new <- new_bib$author %>% str_remove_all("(;$)") %>% str_replace_all(";", " and ")
new_bib[1,]$author_new
new_bib[1:5,]$author_new
new_bib[1:15,]$author_new
lineup <- function(bib){
line1 <- "@Article{,"
line2 <- str_c("author  = {", bib$author_new, "},")
line3 <- str_c("journal = {", bib$journal, "},")
line4 <- str_c("title   = {", bib$title, "},")
line5 <- str_c("year    = {", bib$year, "},")
line6 <- str_c("note    = {", bib$note, "},")
line7 <- str_c("number  = {", bib$number, "},")
line8 <- str_c("pages   = {", bib$pages, "},")
line9 <- str_c("volume  = {", bib$volume, "},")
line10 <-  "},"
line11 <-  ""
}
new_bib_file <- character()
lineup <- function(bib){
line1 <- "@Article{,"
line2 <- str_c("author  = {", bib$author_new, "},")
line3 <- str_c("journal = {", bib$journal, "},")
line4 <- str_c("title   = {", bib$title, "},")
line5 <- str_c("year    = {", bib$year, "},")
line6 <- str_c("note    = {", bib$note, "},")
line7 <- str_c("number  = {", bib$number, "},")
line8 <- str_c("pages   = {", bib$pages, "},")
line9 <- str_c("volume  = {", bib$volume, "},")
line10 <-  "},"
line11 <-  ""
out <- c(line1, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11)
return(out)
}
new_bib_file <- character()
for (i in 1:nrow(new_bib)) {
new_bib_file <- new_bib_file %>% c(lineup(new_bib))
}
head(new_bib_file, 10)
new_bib_file <- character()
for (i in 1:nrow(new_bib)) {
new_bib_file <- new_bib_file %>% c(lineup(new_bib[i,]))
}
head(new_bib_file, 10)
saveRDS(new_bib, file = "bib_2journals.rds")
?write_lines
writeLines(new_bib_file, "bib-2journals.bib")
writeLines(new_bib_file, "D:/literature/0bib/bib-2journals.bib")
head(new_bib)
# saveRDS(new_bib, file = "bib_2journals.rds")
write_excel_csv(new_bib, "D:/literature/0bib/bib-2journals.csv")
# saveRDS(new_bib, file = "bib_2journals.rds")
# write_excel_csv(new_bib, "D:/literature/0bib/bib-2journals.csv")
head(new_bib)
# saveRDS(new_bib, file = "bib_2journals.rds")
# write_excel_csv(new_bib, "D:/literature/0bib/bib-2journals.csv")
new_bib$id <- seq(1, nrow(new_bib))
write_excel_csv(new_bib, "D:/literature/0bib/bib-2journals.csv")
head(new_bib)
load("bib_2journals.rds")
?load
readRDS("bib_2journals.rds")
new_bib <- readRDS("bib_2journals.rds")
if (!require("pacman")) install.packages("pacman"); library(pacman); p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2, pinyin)
write_excel_csv(new_bib, "D:/literature/0bib/bib-2journals2.csv")
reticulate::repl_python()
import plotly.graph_objects as go
Y
import plotly.graph_objects as go
exit
?reticulate
rnorm(1000, mean = 0, sd = 1)
t <- rnorm(1000, mean = 0, sd = 1)
tt <- rep(t, 10)
sd(t)
sd(tt)
tt <- rep(t, 100)
sd(tt)
