opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(csl_eng %>% is.na() == F){
text_out <- pour_eng_bib_rmd(text_out, csl_eng, output)
}
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
kankan <- build_rmd("test-bare.rmd", "shehuixueyanjiu")
writeLines(kankan, "kankan.rmd")
render("kankan.rmd")
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
kankan <- build_rmd("test-bare.rmd", "shehuixueyanjiu")
writeLines(kankan, "kankan.rmd")
render("kankan.rmd")
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
kankan <- build_rmd("test-bare.rmd", "shehuixueyanjiu")
writeLines(kankan, "kankan.rmd")
render("kankan.rmd")
render("kankan.rmd")
lib.loc
lib.loc()
```{r}
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml)
```
```{r}
# 读入rmd文档中的所有英文引用，让他们不在正文出现
bibintext_eng <- function(text){
out <- text
bib <- out %>% str_extract_all(" @([A-Z]|[a-z])[:graph:]+") %>% unlist() %>% str_c(collapse = ", ")
head <- c("nocite: | ", str_c("  ", bib))
return(head)
}
# 读入参考文献库
bibaftertext <- function(text){
out <- text
bib <- out %>% str_extract("bibliography:.*")
bib <- bib[bib %>% is.na() == F]
return(bib)
}
# 读入格式模板
bib_output <- function(output){
out <- readLines(output, encoding = "UTF-8")
bib <- out %>% str_extract("    reference_docx:.*")
bib <- bib[bib %>% is.na() == F]
new <- c("output:","  officedown::rdocx_document:", bib)
return(new)
}
# 根据英文的csl生产新文件
eng_csl <- function(text, csl, output){
inlinebib <- bibintext_eng(text)
bibliography <- bibaftertext(text)
out <- bib_output(output)
newcsl <- str_c("csl: '",csl, "'")
newrmd <- c("---",
out,
bibliography,
newcsl,
inlinebib,
"---",
" ")
return(newrmd)
}
# 把文件变成word,只能是英文的因为中文会乱码在windows上
get_eng_bib_word <- function(text, csl, output){
rmd <- eng_csl(text, csl, output)
writeLines(rmd, "temp_eng_bib_word.rmd")
render("temp_eng_bib_word.rmd")
file.remove("temp_eng_bib_word.rmd")
}
########################################
# 把word倒进原文
pour_eng_bib_rmd <- function(text, csl, output){
get_eng_bib_word(text, csl, output)
out <- c(text, "`r block_pour_docx(file = 'temp_eng_bib_word.docx')`")
return(out)
}
bibintext_eng(text_out)
bibaftertext(text)
bib_output(output)
eng_csl(text_out, csl_eng, output)
get_eng_bib_word(text_out, csl_eng, output)
pour_eng_bib_rmd(text, csl_eng, output)
# set output
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
csl_eng <- dt$csl_eng
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(csl_eng %>% is.na() == F){
text_out <- pour_eng_bib_rmd(text_out, csl_eng, output)
}
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
csl_eng <- dt$csl_eng
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml)
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
csl_eng <- dt$csl_eng
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.cap = TRUE)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(tidyverse, officer, officedown, knitr, rmarkdown)
title <- "GPU的工作原理"
subtitle <- "GPU主流供应商"
author_names <- c("李代", "王一真")
affiliation <- c("北京大学中国传统社会研究中心", "北京大学教育学院")
abstract <- "在教育获得差异的研究中，控制考生学业表现之后，如果性别、民
族、城乡等变量系数仍然显著，这些差异是什么机制产生的？ 在二本线以上，
差异是由录取中的不确定性驱动的，而在二本线以下，差异是由不同群体考
生对不同层次教育的偏好驱动的。本文采用Ｘ 省完整高考数据，刻画了不
确定性的分布情况、不同社会群体应对不确定性的行为差异以及最终对教育
获得差异的影响，并探讨了教育扩张等政策对不确定性的影响。本文研究成
果有助于打开教育获得差异生成机制的黑箱，为教育获得差异研究带来新的
视角。"
keywords <- c("主要", "特效处理", "游戏", "显卡")
author_str <- str_c(author_names, collapse = "，")
figures <- read_csv("figures.csv")
tables <- read_csv("tables.csv")
ft <- fp_text(font.size = 10.5,
bold = F,
font.family = "FangSong",
underlined = F
)
institute_str <- character()
for (i in 1:length(author)) {
temp_text <- ifelse(i == 1,
str_c("作者单位：", affiliation[i], "（", author[i],"）"),
str_c(affiliation[i], "（", author[i],"）"))
institute_str <- c(institute_str, temp_text)
}
abstract_text1 <- fp_text(font.size = 9,
bold = F,
font.family = "SimHei",
underlined = F
)
abstract_text2 <- fp_text(font.size = 9,
bold = F,
font.family = "FangSong",
underlined = F
)
get_author <- function(author){
author_text <- character()
for (i in 1:length(author)) {
temp_a <- ifelse(nchar(author[i]) == 2, str_c(str_sub(author[i], 1,1),"   ",str_sub(author[i], 2,2)), author[i])
author_text <- c(author_text, temp_a)
}
author_text <- str_c(author_text, collapse = "  ")
return(author_text)
}
author_str <- get_author(author_names)
author_str
author_text <- fp_text(font.size = 12,
bold = F,
font.family = "KaiTi_GB2312",
underlined = F
)
author_para <- fp_par(text.align = "center",
line_spacing = 1,
padding.bottom = 0,
padding.top = 0)
author_names
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
dt
opening	<- dt$opening
opening
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml)
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
add_output <- function(text, child){
childdoc <- readLines(child, encoding = "UTF-8")
yaml_position <- text %>% str_detect("---") %>% which()
start <- yaml_position[2]
newtext <- c(text[1:(start-1)], childdoc, text[(start):length(text)])
return(newtext)
}
# 定制开头
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
return(text)
}
# 查有几个作者
author_line <- function(text){
out <- text
bib <- out %>% str_extract("author_names.*c\\(.*")
bib <- bib[bib %>% is.na() == F]
n <- str_count(bib, ",") + 1
return(n)
}
add_ending <- function(text, child){
n <- author_line(text)
childdoc <- readLines(child, encoding = "UTF-8")
added <- str_c("`r ftext(institute_str[", seq(1,n), "], ft)`")
insti <- character()
for (i in 1:n) {
insti <- c(insti, added[i], "")
}
text <- c(text, childdoc, insti)
return(text)
}
build_rmd <- function(file, name){
build_parameters <- read_csv("build_parameters.csv")
dt <- subset(build_parameters, name == name)
output <- dt$output
opening	<- dt$opening
ending <- dt$ending
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
if(ending %>% is.na() == F){
text_out <- add_ending(text_out, ending)
}
return(text_out)
}
file <- "test-bare.rmd"
add_opening(text_out, opening)
text <- readLines(file, encoding = "UTF-8")
text_out <- add_output(text, output)
output <- dt$output
text_out <- add_output(text, output)
text_out <- add_opening(text_out, opening)
text_out
childdoc <- str_c("```{r, child=c('", child, "')}")
child <- opening
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text_out
text <- text %>% str_replace(
c("<!-- opening -->", "<!-- chunkending -->"),
c(childdoc, "```"))
text
text <- text %>% str_replace("<!-- opening -->",childdoc)
text
add_opening <- function(text, child){
childdoc <- str_c("```{r, child=c('", child, "')}")
text <- text %>% str_replace("<!-- opening -->",childdoc)
text <- text %>% str_replace("<!-- openingending -->","```")
return(text)
}
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
build_rmd("test-bare.rmd", "shehuixueyanjiu") %>% writeLines("shehuixueyanjiu.rmd")
# 需要手动改一下编码之后
render("shehuixueyanjiu.rmd")
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, Roxygen2)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
parameters<- read_csv("build_parameters.csv")
parameters<- read_csv("build_parameters.csv")
parameters
saveRDS(parameters, file = "build_parameters.rds")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
parameters<- read_csv("build_parameters.csv")
parameters<- read_csv("build_parameters.csv")
use_data(parameters)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(devtools, officer, officedown, knitr, rmarkdown, tidyverse, qdapRegex, readxl, stringi, yaml, roxygen2)
install_github("lidaidavid/academicwriting")
install_github("lidaidavid/academicwriting")
use_data(parameters, internal = T)
parameters<- read_csv("build_parameters.csv")
use_data(parameters, internal = T)
load("R/sysdata.rda")
k <- load("R/sysdata.rda")
k
build_parameters <- read_csv("build_parameters.csv")
use_data(build_parameters, internal = T)
use_data(build_parameters, internal = T, overwrite = T)
